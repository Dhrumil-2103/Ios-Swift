import Foundation
import UIKit
import PhotosUI

class ImagePickerManager: NSObject, UIImagePickerControllerDelegate, UINavigationControllerDelegate {

   
    var picker = UIImagePickerController();
    var alert = UIAlertController(title: "Choose Image", message: nil, preferredStyle: .actionSheet)
    
    var viewController: UIViewController?
    var pickImageCallback : ((UIImage) -> ())?;
    
    override init(){
        super.init()
    }

    func pickImage(_ viewController: UIViewController, _ callback: @escaping ((UIImage) -> ())) {
         if (UIDevice.current.userInterfaceIdiom == .pad) {
             alert = UIAlertController(title: "Choose Image", message: nil, preferredStyle: .alert)
         }
        pickImageCallback = callback;
        self.viewController = viewController;
        
        
//        if isCamera {
//            self.openCamera()
//        }else{
//            self.openGallery()
//        }
        let cameraAction = UIAlertAction(title: "Camera", style: .default){
            UIAlertAction in
            self.openCamera()
        }
        let galleryAction = UIAlertAction(title: "Gallery", style: .default){
            UIAlertAction in
            self.openGallery()
        }
        let cancelAction = UIAlertAction(title: "Cancel", style: .cancel){
            UIAlertAction in
        }

        //Add the actions
        picker.delegate = self
        alert.addAction(cameraAction)
        alert.addAction(galleryAction)
        alert.addAction(cancelAction)
        alert.popoverPresentationController?.sourceView = self.viewController!.view

        viewController.present(alert, animated: true, completion: nil)
    }
    func openCamera(){
        alert.dismiss(animated: true, completion: nil)
        if(UIImagePickerController .isSourceTypeAvailable(.camera)){
            picker.sourceType = .camera
            self.viewController!.present(picker, animated: true, completion: nil)
        } else {
            let alertWarning = UIAlertView(title:"Warning", message: "You don't have camera", delegate:nil, cancelButtonTitle:"OK", otherButtonTitles:"")
            alertWarning.show()
        }
    }
    func openGallery(){
        alert.dismiss(animated: true, completion: nil)
        picker.sourceType = .photoLibrary
        self.viewController!.present(picker, animated: true, completion: nil)
    }
    
//    func pickVideo(_ viewController: UIViewController, _ callback: @escaping ((URL) -> ())) {
//        pickURLCallback = callback;
//        self.viewController = viewController;
//        
//        let cameraAction = UIAlertAction(title: "Camera", style: .default){
//            UIAlertAction in
//            self.openCamera()
//        }
//        let galleryAction = UIAlertAction(title: "Video", style: .default){
//            UIAlertAction in
//            self.uploadVideo()
//        }
//        let cancelAction = UIAlertAction(title: "Cancel", style: .cancel){
//            UIAlertAction in
//        }
//
//        //Add the actions
//        picker.delegate = self
//        alertVideo.addAction(cameraAction)
//        alertVideo.addAction(galleryAction)
//        alertVideo.addAction(cancelAction)
//        alertVideo.popoverPresentationController?.sourceView = self.viewController!.view
//        viewController.present(alertVideo, animated: true, completion: nil)
//    }
//    
//    func uploadVideo() {
//        var configuration = PHPickerConfiguration()
//        configuration.filter = .videos
//        let photoPicker = PHPickerViewController(configuration: configuration)
//        photoPicker.delegate = self
//        self.viewController!.present(photoPicker, animated: true)
//    }
//    
//    func picker(_ picker: PHPickerViewController, didFinishPicking results: [PHPickerResult]) {
//        picker.dismiss(animated: true)
//        
//        guard let provider = results.first?.itemProvider else { return }
//        
//        if provider.hasItemConformingToTypeIdentifier(UTType.movie.identifier) {
//            provider.loadFileRepresentation(forTypeIdentifier: UTType.movie.identifier) { [weak self] fileURL, error in
//                guard let fileURL = fileURL, error == nil else { return }
//                
//                print(fileURL)
////                self?.uploadVideoToStorage(videoURL: fileURL) { downloadURLString in
////                    guard let downloadURLString = downloadURLString else {
////                        print("noooo")
////                        return
////                    }
////                    print(downloadURLString)
////                    print("yaaay")
////                }
//            }
//        }
//    }
    
    func imagePickerControllerDidCancel(_ picker: UIImagePickerController) {
        picker.dismiss(animated: true, completion: nil)
    }
    //for swift below 4.2
    //func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [String : Any]) {
    //    picker.dismiss(animated: true, completion: nil)
    //    let image = info[UIImagePickerControllerOriginalImage] as! UIImage
    //    pickImageCallback?(image)
    //}

    // For Swift 4.2+
    func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey : Any]) {
        picker.dismiss(animated: true, completion: nil)
        guard let image = info[.originalImage] as? UIImage else {
            fatalError("Expected a dictionary containing an image, but was provided the following: \(info)")
        }
        pickImageCallback?(image.fixOrientation())
    }



    @objc func imagePickerController(_ picker: UIImagePickerController, pickedImage: UIImage?) {
        
    }

}


===================================================================================================


// How to use.......

      self.btnChangeProfile.addTargetClosure { sender in
            ImagePickerManager().pickImage(self){ image in
                
                self.imgProfilePhoto.image = image
                self.imgProfilePhoto.contentMode = .scaleAspectFill
            }
        }


